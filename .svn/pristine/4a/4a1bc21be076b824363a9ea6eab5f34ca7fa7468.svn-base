<?php

class eVideo extends Video {

    public static function model($className = __CLASS__) {
        return parent::model($className);
    }
        
    public function filterByDate($filterDate) {
        return DateTimeUtility::filterByDate($this, $filterDate);
    }

    public function orderBy($id, $order) {
        if (is_null($id)) {
            $sql = '
                select view_key,v.user_id,thumbnail,title,v.created_on,first_name,last_name,COUNT(vv.id) AS views, AVG(vr.rating) as rating
                    from video v
                    LEFT JOIN user u ON u.id = v.user_id
                    LEFT JOIN video_rating vr on vr.video_id = v.id
                    LEFT JOIN video_view vv on vv.video_id = v.id
                    where status = "accepted"
                    group by v.id                            
            ';
        } else {
            $sql = '
                select view_key,v.user_id,thumbnail,title,v.created_on,first_name,last_name
								-- ,COUNT(vv.id) AS views, AVG(vr.rating) as rating
                    from video v
                    LEFT JOIN user u ON u.id = v.user_id
                    -- LEFT JOIN video_rating vr on vr.video_id = v.id
                    -- LEFT JOIN video_view vv on vv.video_id = v.id
                    where
										status = "accepted"
                    and
										v.user_id = "%d"
                    group by v.id                            
            ';
            $sql = sprintf($sql, $id);
        }
        switch ($order) {
            case 'views':
                $sql .= 'order by views desc';
                $videos = Yii::app()->db->createCommand($sql)->queryAll(true);
                $videos = json_decode(json_encode($videos));
                break;
            case 'rating':
                $sql .= 'order by rating desc';
                $videos = Yii::app()->db->createCommand($sql)->queryAll(true);
                $videos = json_decode(json_encode($videos));
                break;
            default:
                $sql .= 'order by v.updated_on desc';
                $videos = Yii::app()->db->createCommand($sql)->queryAll(true);
                $videos = json_decode(json_encode($videos));
                break;
        }
        return $videos;
    }

    /**
     * @return array validation rules for model attributes.
     */
    public function rules() {
        // NOTE: you should only define rules for those attributes that
        // will receive user inputs.
        return array(
            array('question_id, source', 'required'),
            array('title', 'required', 'on' => 'update'),
            array('created_on,updated_on', 'default', 'value' => new CDbExpression('NOW()'),'setOnEmpty'=>false,'on' => 'insert'),
            array('updated_on', 'default', 'value' => new CDbExpression('NOW()'),'setOnEmpty'=>false,'on' => 'update'),
            array('status', 'default', 'value' => 'new', 'on' => 'insert'),
            array('filename, thumbnail', 'required', 'on' => 'insert'),
            array('filename, thumbnail', 'unique'),
            array('user_id', 'default', 'value' => Yii::app()->user->getId(), 'on' => 'insert'),
            array('view_key', 'default', 'value' => md5(uniqid('', true)), 'on' => 'insert'),
            array('user_id, watermarked, question_id, to_youtube, to_facebook, to_twitter, arbitrator_id', 'numerical', 'integerOnly' => true),
            array('title, view_key, source, description', 'length', 'max' => 255),
            array('status', 'length', 'max' => 8),
            // The following rule is used by search().
            // Please remove those attributes that should not be searched.
            array('id, user_id, question_id, title, description, view_key, source, watermarked, to_youtube, to_facebook, to_twitter, arbitrator_id, status, status_date, created_on, updated_on', 'safe', 'on' => 'search'),
        );
    }
    
    /**
     * @return array relational rules.
     */
    public function relations() {
        // NOTE: you may need to adjust the relation name and the related
        // class name for the relations automatically generated below.
        return array(
            'brightcoves' => array(self::HAS_MANY, 'eBrightcove', 'video_id'),
            'arbitrator' => array(self::BELONGS_TO, 'User', 'arbitrator_id'),            
            'user' => array(self::BELONGS_TO, 'eUser', 'user_id'),
            'question' => array(self::BELONGS_TO, 'eQuestion', 'question_id'),
            'videoDestinations' => array(self::HAS_MANY, 'eVideoDestination', 'video_id'),
            'videoRatings' => array(self::HAS_MANY, 'eVideoRating', 'video_id'),
            'videoViews' => array(self::HAS_MANY, 'eVideoView', 'video_id'),
            'rating' => array(self::STAT, 'eVideoRating', 'video_id', 'select' => 'ROUND(AVG(rating))', 'group' => 'video_id'),
            'views' => array(self::STAT, 'eVideoView', 'video_id', 'select' => 'COUNT(id)', 'group' => 'video_id'),
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {    
        return CMap::mergeArray(parent::attributeLabels(),array(
            'to_youtube' => 'Youtube',
            'to_facebook' => 'Facebook',
            'to_twitter' => 'Twitter',
        ));
    }

    public function scopes() {
        return array(
            'recent' => array('order' => '`t`.`id` desc'),
            'byViews' => array('order' => '`t`.views desc'),
            'rating' => array('order' => '`t`.rating desc'),
            'new' => array('condition' => '`t`.status="new"'),
            'accepted' => array('condition' => '`t`.status="accepted"'),
            'denied' => array('condition' => '`t`.status="denied"'),
            'processed' => array('condition' => '`t`.processed=1'),
        );
    }

}
