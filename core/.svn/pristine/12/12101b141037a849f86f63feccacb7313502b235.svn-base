//jQuery.noConflict();

var tabHandlers = function() {
    $('#videoSchedulerModalTabs').tabs();
}

var datePickerHandler = function() {
    // datepickers for datestart datestop on video filters
    $( "#datepickerVideoSchedulerFilter" ).datepicker({
        //maxDate: "0"
        });
}

var showTable;
var spotTable;


$(document).ready(function () {
    tabHandlers();
    datePickerHandler();
    initShowTable();
    showTableActions();
});

function showTableActions ()
{
    showTable = initShowTable();
    
    $("#datatableScheduler tbody").click(function(event) {
             
        $(showTable.fnSettings().aoData).each(function() {
            $(this.nTr).removeClass('row_selected');
        });
        $(event.target.parentNode).addClass('row_selected');
             
    });
    
    
}


function testme() {
    $("#datatableScheduler tbody tr").off('click');
    $("#datatableScheduler tbody tr").on('click', function(event) {
        
        var aPos = showTable.fnGetPosition(this);
        var aData = showTable.fnGetData(aPos);
        var show_on = aData[6];
        var network_show_id = aData[7];
        var spot_type = aData[8];
        
        $('#datatableSpotScheduler').show();

        if(typeof spotTable != 'undefined') {
            
            spotTable.fnDestroy();
            //spotTable.fnClearTable(0);
            //spotTable.fnDraw();
            //spotUrl = '/adminVideo/ajaxVideoGetNetworkSpotSchedule?show_on='+show_on+'&spot_type='+spot_type+'&network_show_id='+network_show_id;
            //spotTable.fnReloadAjax(spotUrl);
        }
        
        spotTable = initSpotTable(show_on, spot_type, network_show_id);
    });
}

function initShowTable ()
{
    return  $('#datatableScheduler').dataTable({
        "bProcessing": true,
        "sScrollY": "185px",
        "bPaginate": false,
        "sAjaxSource": '/adminVideo/ajaxVideoGetNetworkShowSchedule?spot_type=FS',
        "bFilter": false,
        "bSort": false,
        "bRetrieve": true,
        "fnDrawCallback": function( oSettings ) {
            testme();
        },
        "aoColumns": [
        {
            "sWidth": "25%"
        },
        {
            "sWidth": "25%"
        },
        {
            "sWidth": "20%"
        },
        {
            "sWidth": "20%"
        },
        {
            "sWidth": "5%"
        },
        {
            "sWidth": "5%"
        },
        {
            "bVisible": false
        },
        {
            "bVisible": false
        },
        {
            "bVisible": false
        },
        ]
    });
}


function initSpotTable(show_on, spot_type, network_show_id) {
    return  $('#datatableSpotScheduler').dataTable({
        "bProcessing": true,
        "sScrollY": "185px",
        "bPaginate": false,
        "sAjaxSource": '/adminVideo/ajaxVideoGetNetworkSpotSchedule?show_on='+show_on+'&spot_type='+spot_type+'&network_show_id='+network_show_id,
        "bFilter": false,
        "bSort": false,
        "bRetrive": true,
        "bDestroy": true,
        "aoColumns": [
        {
            "sWidth": "20%"
        },
        {
            "sWidth": "10%"
        },
        {
            "sWidth": "10%"
        },
        {
            "sWidth": "20%"
        },
        {
            "sWidth": "20%"
        },
        {
            "sWidth": "20%"
        },
        ]
    });
}

$.fn.dataTableExt.oApi.fnReloadAjax = function ( oSettings, sNewSource, fnCallback, bStandingRedraw )
{
    if ( sNewSource !== undefined && sNewSource !== null ) {
        oSettings.sAjaxSource = sNewSource;
    }
 
    // Server-side processing should just call fnDraw
    if ( oSettings.oFeatures.bServerSide ) {
        this.fnDraw();
        return;
    }
 
    this.oApi._fnProcessingDisplay( oSettings, true );
    var that = this;
    var iStart = oSettings._iDisplayStart;
    var aData = [];
 
    this.oApi._fnServerParams( oSettings, aData );
 
    oSettings.fnServerData.call( oSettings.oInstance, oSettings.sAjaxSource, aData, function(json) {
        /* Clear the old information from the table */
        that.oApi._fnClearTable( oSettings );
 
        /* Got the data - add it to the table */
        var aData =  (oSettings.sAjaxDataProp !== "") ?
        that.oApi._fnGetObjectDataFn( oSettings.sAjaxDataProp )( json ) : json;
 
        for ( var i=0 ; i<aData.length ; i++ )
        {
            that.oApi._fnAddData( oSettings, aData[i] );
        }
         
        oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();
 
        that.fnDraw();
 
        if ( bStandingRedraw === true )
        {
            oSettings._iDisplayStart = iStart;
            that.oApi._fnCalculateEnd( oSettings );
            that.fnDraw( false );
        }
 
        that.oApi._fnProcessingDisplay( oSettings, false );
 
        /* Callback user function - for event handlers etc */
        if ( typeof fnCallback == 'function' && fnCallback !== null )
        {
            fnCallback( oSettings );
        }
    }, oSettings );
};