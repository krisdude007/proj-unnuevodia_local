<?php

class VideoUtility {
    /*
     * All FFMPEG CALLS
     */

    public static function ffmpegFlvToGif($fileInput, $fileOutput, $scale = '179:101', $fps = "2") {
        $fileInfo = VideoUtility::getID3Info($fileInput);
        $duration = round($fileInfo['playtime_seconds']);
        $cmd = VIDEO_FFMPEG_PATH . " -y -i $fileInput -vf scale=$scale,fps=fps=$fps -t 15 $fileOutput";
        exec($cmd);
    }

    public static function ffmpegFlvToMp4($fileInput, $fileOutput, $duration, $watermark = '') {

        if (file_exists($fileInput)) {

            if (file_exists($watermark)) {
                switch (VIDEO_WATERMARK_LOCATION) {
                    case 'topLeft':
                        $location = '10:10';
                        break;
                    case 'topRight':
                        $location = 'main_w-overlay_w-10:10';
                        break;
                    case 'bottomLeft':
                        $location = '10:main_h-overlay_h-10';
                        break;
                    case 'bottomRight':
                        $location = 'main_w-overlay_w-10:main_h-overlay_h-10';
                        break;
                    case 'center':
                        $location = 'main_w/2-overlay_w/2:main_h/2-overlay_h/2';
                        break;
                }

                $watermark = "-vf 'movie={$watermark} [watermark]; [in][watermark] overlay={$location}:1 [out]'";
            } else {
                $watermark = '';
            }

            $cmd = VIDEO_FFMPEG_PATH . " -y -i $fileInput $watermark -q:v 1 -async 1  -r 30 -b:v 2M -bt 4M -vcodec libx264 -preset placebo -g 1 -movflags +faststart -acodec libfdk_aac -ac 2 -ar 48000 -ab 192k -t $duration $fileOutput > /dev/null 2>/dev/null & ";
            exec($cmd);

            return true;
        }

        return false;
    }

    public static function ffmpegRescaleVideo($fileInput, $fileOutput, $qualityScale = 0, $vf = 'scale=960:540', $fps = 30) {

        if (file_exists($fileInput)) {

            $cmd = VIDEO_FFMPEG_PATH . " -i $fileInput -qscale $qualityScale -vf $vf -r $fps -g 1 -y  $fileOutput > /dev/null 2>/dev/null & ";
            exec($cmd);
            copy($fileOutput, $fileInput);
            unlink($fileOutput);

            return true;
        }

        return false;
    }

    public static function ffmpegGenerateThumbFromVideo($fileInput, $fileOutput, $seekStart = '00:00:00', $format = 'image2', $size = '640x360', $numFrames = 1, $overwrite = '-y') {

        if (file_exists($fileInput)) {

            $cmd = VIDEO_FFMPEG_PATH . " -ss $seekStart $overwrite -i $fileInput -f $format -s $size -vframes $numFrames $fileOutput > /dev/null 2>/dev/null & ";
            exec($cmd);

            if (file_exists($fileOutput)) {
                return true;
            }
        }
        return false;
    }

    public static function ffprobeVideo($fileInput) {

        if (file_exists($fileInput)) {

            $cmd = VIDEO_FFPROBE_PATH . " -loglevel error -show_format -show_streams -show_format -print_format json $fileInput";
            exec($cmd, $output);

            if (count($output) > 0) {

                $str = '';

                foreach ($output as $o) {
                    $str .= $o;
                }

                return json_decode($str);
            }

            return false;
        }

        return false;
    }

    public static function generateThumbnailsForVideo($fileInput) {

        $videoPath = Yii::app()->params['paths']['video'];
        $videoFilePath = $videoPath . '/' . $fileInput . VIDEO_POST_FILE_EXT;
        $jsonPath = $videoPath . '/' . $fileInput . '.json';

        // check for .json file
        if (file_exists($jsonPath)) {

            //get the thumbs
            return json_decode(file_get_contents($jsonPath));
        } else {

            // generate thumbs & .json file containing thumb filenames
            $durationArray = self::getVideoDuration($videoFilePath);

            // make sure we retrieved the video duration
            if ($durationArray != false) {

                $iterations = 10;
                $duration = explode('.', $durationArray[2]);
                $duration = round($duration[0]);

                if ($duration < $iterations) {
                    $iterations = $duration;
                }

                $return = array();
                // store original thumb
                $return[0] = $fileInput . VIDEO_IMAGE_FILE_EXT;

                // generate 9 thumbnails since one already exist
                for ($i = 1; $i < $iterations; ++$i) {
                    $imageName = $fileInput . '_' . $i . VIDEO_IMAGE_FILE_EXT;
                    $imagePath = $videoPath . '/' . $imageName;
                    $exec = VIDEO_FFMPEG_PATH . " -ss $i -i $videoFilePath -f image2 -vframes 1 $imagePath";
                    exec($exec);
                    $return[$i] = $imageName;
                }

                /*
                 * $count = count($durationArray);
                  $last = ($count - 1);
                  $time = floor($durationArray[$last]);
                  $frames = (VIDEO_FRAMES_PER_SEC * $time);
                  $top = floor($frames);
                 * 
                 * 
                  //only run per offset, groups of 8
                  for ($i = 0; $i < $top; $i++) {
                  if ($i % 3 === 0) {

                  $frame = round(($i / VIDEO_FRAMES_PER_SEC), 2);
                  $second = floor($frame);

                  //print $second;
                  if ($second == $offset) {

                  $imageName = $filename . '_' . $num . '.png';
                  $imagePath = $videoPath . '/' . $imageName;
                  $exec = VIDEO_FFMPEG_PATH . " -i $videoFilePath -f image2 -vframes 1 $imagePath -ss $frame";
                  //$exec = VIDEO_FFMPEG_PATH . "ffmpeg -i $videoFilePath -r " . VIDEO_FRAMES_PER_SEC ." -f image2 $filename_%02d.png";
                  //exec($exec);
                  $return[$num] = $imageName;
                  ++$num;
                  }
                  }
                  }
                 * 
                 */

                $encodedArr = json_encode($return);
                file_put_contents($jsonPath, $encodedArr);
                return json_decode($encodedArr);
            } else {
                return false;
            }
        }
    }

    public static function getVideoDuration($videoFilePath) {

        if (file_exists($videoFilePath)) {
            $cmd = VIDEO_FFMPEG_PATH . " -i $videoFilePath 2>&1 | grep Duration |  awk '{print $2}' | tr -d ,";
            $result = exec($cmd);
            return explode(":", $result);
        } else {
            return false;
        }
    }

    public static function getIndicatorColor($videoDuration) {

        $maxDuration = (float) Yii::app()->params['video']['duration'];
        $thresholdMin = (float) Yii::app()->params['videoAdmin']['indicatorThreshold']['min'];
        $thresholdMax = (float) Yii::app()->params['videoAdmin']['indicatorThreshold']['max'];
        $videoDuration = (float) $videoDuration;


        // if under the max
        if ($videoDuration < $maxDuration) {
            $str = 'red';
        }
        // if over
        elseif ($videoDuration > $maxDuration) {

            // if under $thresholdMin = green
            $diff = $videoDuration - $maxDuration;
            $diff = (float) $diff;

            if ($diff < $thresholdMin) {
                $str = 'green';
            }
            // else, if over $thresholdMin and under $thresholdMax = yellow 
            elseif ($diff >= $thresholdMin && $diff < $thresholdMax) {
                $str = 'yellow';
            }
            // else greater than $thresholdMax = red
            else {
                $str = 'red';
            }
        }
        // if equal (rare)
        else {
            $str = 'green';
        }

        return $str;
    }

    // gets values for video status dropdown
    public static function getStatuses() {
        
        $prodAdmin = array('new' => 'New',
                           'accepted' => 'Accepted');
        
        if(Yii::app()->user->isSuperAdmin())
        {
            $superAdmin = array('denied' => 'Deleted',
                                'all' => 'All');
        }
        
        return CMap::mergeArray($prodAdmin, $superAdmin);
    }

    public static function getVideoFileExtention($processed = 0) {

        if ($processed == 1) {
            return VIDEO_POST_FILE_EXT;
        } else {
            return VIDEO_PRE_FILE_EXT;
        }
    }

    public static function getPerPageOptions() {
        return array('12' => '12',
            '24' => '24',
            '36' => '36',
            '48' => '48'
        );
    }

    public static function getID3Info($fileInput) {
        $id3 = new getID3;
        $fileInfo = $id3->analyze($fileInput);
        return $fileInfo;
    }

}

?>
