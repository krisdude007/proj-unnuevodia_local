<?php

class eQuestion extends Question {

    public $videoTally;
    public $tickerTally;
    public $videoAcceptedTvTally;
    public $tickerAcceptedTvTally;

    public static function model($className = __CLASS__) {
        return parent::model($className);
    }

    public function rules() {
        // NOTE: you should only define rules for those attributes that
        // will receive user inputs.
        return array(
            array('user_id', 'default', 'value' => Yii::app()->user->getId()),
            array('created_on, updated_on', 'default', 'value' => date("Y-m-d H:i:s"), 'setOnEmpty' => false, 'on' => 'insert'),
            array('updated_on', 'default', 'value' => date("Y-m-d H:i:s"), 'setOnEmpty' => false, 'on' => 'update'),
            array('question, start_time, end_time', 'required', 'on' => 'insert'),
            array('user_id, is_ticker, is_deleted', 'numerical', 'integerOnly' => true),
            array('question', 'length', 'max' => 255, 'encoding' => 'UTF-8'),
            array('hashtag', 'length', 'max' => 64, 'encoding' => 'UTF-8'),
            // The following rule is used by search().
            // Please remove those attributes that should not be searched.
            array('id, user_id, question, hashtag, start_time, end_time, created_on, updated_on,videoTally,tickerTally,videoAcceptedTvTally,tickerAcceptedTvTally', 'safe', 'on' => 'search'),
        );
    }

    public function relations() {
        $defaultRelations = array(
            'user' => array(self::BELONGS_TO, 'eUser', 'user_id'),
            'videos' => array(self::HAS_MANY, 'eVideo', 'question_id'),
            'tickers' => array(self::HAS_MANY, 'eTicker', 'question_id'),
            'videoTally' => array(self::STAT, 'eVideo', 'question_id', 'select' => 'COUNT(id)', 'group' => 'question_id', 'condition' => 'status="accepted"'),
            'tickerTally' => array(self::STAT, 'eTicker', 'question_id', 'select' => 'COUNT(id)', 'group' => 'question_id', 'condition' => 'status="accepted"'),
        );
        if (VIDEO_FILTERS_EXTENDED) {
            $videoExtendedRelation = array(
                'videoAcceptedTvTally' => array_merge(array(self::STAT, 'eVideo', 'question_id', 'select' => 'COUNT(id)', 'group' => 'question_id'), Utility::getAcceptedTVScope(VIDEO_FILTERS_EXTENDED_LABELS)),
            );
        } else {
            $videoExtendedRelation = array(
                'videoAcceptedTvTally' => array(self::STAT, 'eVideo', 'question_id', 'select' => 'COUNT(id)', 'group' => 'question_id', 'condition' => 'status="accepted"'),
            );
        }

        if (TICKER_FILTERS_EXTENDED) {
            $tickerExtendedRelation = array(
                'tickerAcceptedTvTally' => array_merge(array(self::STAT, 'eTicker', 'question_id', 'select' => 'COUNT(id)', 'group' => 'question_id'), Utility::getAcceptedTVScope(TICKER_FILTERS_EXTENDED_LABELS)),
            );
        } else {
            $tickerExtendedRelation = array(
                'tickerAcceptedTvTally' => array(self::STAT, 'eTicker', 'question_id', 'select' => 'COUNT(id)', 'group' => 'question_id', 'condition' => 'status="accepted"'),
            );
        }
        return CMap::mergeArray($defaultRelations, CMap::mergeArray($videoExtendedRelation, $tickerExtendedRelation));
    }

    public function scopes() {
        return array(
            'current' => array(
                'condition' => "NOW() BETWEEN start_time AND end_time AND is_deleted = '0'"
            ),
            'recent' => array('order' => '`t`.`id` DESC'),
            'today' => array(
                'condition' => "DATE(start_time) = CURDATE() AND is_deleted = '0'"
            ),
            'ticker' => array(
                'condition' => "is_ticker = '1'"
            ),
            'video' => array(
                'condition' => "is_ticker = '0'"
            ),
            'deleted' => array(
                'condition' => "is_deleted = '1'"
            ),
            'notdeleted' => array(
                'condition' => "is_deleted = '0'"
            ),
            'orderByCreatedDesc' => array(
                'order' => '`t`.created_on DESC',
            ),
            'orderByCreatedAsc' => array(
                'order' => '`t`.created_on ASC',
            ),
            'orderByIDDesc' => array(
                'order' => '`t`.id DESC',
            ),
        );
    }

    public function attributeLabels() {
        return array_merge(
                parent::attributeLabels(), array(
            'videoTally' => 'Video Submits',
            'videoAcceptedTvTally' => 'Video Submits Accepted TV',
            'tickerTally' => 'Ticker Submits',
            'tickerAcceptedTvTally' => 'Ticker Submits Accepted TV',
            'user.username' => 'Created By'));
    }

    //type should be 'video' or 'ticker'
    public function search($type) {

        if (constant(strtoupper($type) . '_FILTERS_EXTENDED')) {
            ${$type . 'ExtendedCondition'} = current(Utility::getAcceptedTVScope(constant(strtoupper($type) . '_FILTERS_EXTENDED_LABELS'), 'tn'));
        } else {
            ${$type . 'ExtendedCondition'} = 'status="accepted"';
        }

        $criteria = new CDbCriteria;
        //search
        $criteria->compare('id', $this->id);
        $criteria->compare('user_id', $this->user_id);
        //$criteria->compare('is_ticker', $this->is_ticker);
        $criteria->compare('is_deleted', $this->is_deleted);
        $criteria->compare('question', $this->question, true);
        //$criteria->compare('hashtag', $this->hashtag, true);
        $criteria->compare('start_time', $this->start_time !== null ? gmdate('Y-m-d H:i:s', strtotime($this->start_time)) : null);
        $criteria->compare('end_time', $this->end_time !== null ? gmdate('Y-m-d H:i:s', strtotime($this->end_time)) : null);
        $criteria->compare('created_on', $this->created_on !== null ? gmdate('Y-m-d H:i:s', strtotime($this->created_on)) : null);
        //$criteria->compare('updated_on', $this->updated_on, true);
        $criteria->compare($type . 'Tally', $this->{$type . 'Tally'});
        $criteria->compare($type . 'AcceptedTvTally', $this->{$type . 'AcceptedTvTally'});
        $className = 'e' . ucfirst($type);
        $tableName = $className::model()->tableName();
        $CountSql = "(select count(id) from " . $tableName . " tn where tn.question_id = t.id)";
        $TVAcceptedCountSql = "(select count(id) from " . $tableName . " tn where tn.question_id = t.id AND " . ${$type . 'ExtendedCondition'} . ")";
        $criteria->select = array('*', $CountSql . " as {$type}Tally", $TVAcceptedCountSql . " as {$type}AcceptedTvTally");
        //paging
        $pages = new CPagination(eQuestion::model()->{$type}()->count($criteria));
        $pages->pageSize = Yii::app()->params['questionReport']['perPage'];
        $pages->applyLimit($criteria);
        //sort
        $sort = new CSort('question');
        $sort->multiSort = false;
        //$sort->params = array('ajax' => 'admin-Question-table');//disable ajax load
        $sort->attributes = array(//$sort->attributes=array('*');
            'id',
            'question',
            'start_time',
            'end_time',
            $type . 'Tally' => array('asc' => $type . 'Tally ASC', 'desc' => $type . 'Tally DESC'),
            $type . 'AcceptedTvTally' => array('asc' => $type . 'AcceptedTvTally ASC', 'desc' => $type . 'AcceptedTvTally DESC'),
            'user.username',
            'created_on',
        );
        $sort->defaultOrder = 'id DESC';
        $sort->applyOrder($criteria);
        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
            'pagination' => $pages,
            'sort' => $sort,
        ));
    }

}

