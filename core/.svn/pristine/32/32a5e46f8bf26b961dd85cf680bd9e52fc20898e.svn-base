<?php

class eTicker extends Ticker {

    //Virtual attribute for stopping the ticker from running
    public $stop;
    //Virtual attribute for checking the language of a ticker
    public $clean;

    public static function model($className = __CLASS__) {
        return parent::model($className);
    }

    public function rules() {
        // NOTE: you should only define rules for those attributes that
        // will receive user inputs.
        return array(
            array('ticker, type, source', 'required'),
            array('status', 'default', 'value' => 'new'),
            array('status_date', 'default', 'value' => new CDbExpression('NOW()')),
            array('to_facebook, to_twitter, to_web, to_tv, to_mobile', 'default', 'value' => 0),
            array('created_on,updated_on', 'default', 'value' => new CDbExpression('NOW()'), 'setOnEmpty' => false, 'on' => 'insert'),
            array('updated_on', 'default', 'value' => new CDbExpression('NOW()'), 'setOnEmpty' => false, 'on' => 'update'),
            array('user_id, question_id, entity_id, ordinal, frequency, to_facebook, to_twitter, to_web, to_tv, to_mobile, arbitrator_id', 'numerical', 'integerOnly' => true),
            array('ticker, source, source_content_id, source_user_id', 'length', 'max' => 255),
            array('type', 'length', 'max' => 6),
            array('status', 'length', 'max' => 8),
            array('stopticker', 'safe'),
            // The following rule is used by search().
            // @todo Please remove those attributes that should not be searched.
            array('id, user_id, question_id, ticker, type, source, source_content_id, source_user_id, to_facebook, to_twitter, to_web, to_tv, to_mobile, arbitrator_id, status, status_date, created_on, updated_on', 'safe', 'on' => 'search'),
        );
    }
    
    public function afterFind() {
        $this->clean = LanguageUtility::filter($this->ticker);        
    }
    
    public function afterSave() {
        if($this->status == 'accepted'){
            if($this->to_twitter == 1){
                $destination = eDestination::model()->findByAttributes(Array('destination'=>'twitter'));
                $sent = eTickerDestination::model()->findByAttributes(Array('ticker_id'=>$this->id,'user_id'=>$this->user_id,'destination_id'=>$destination->id));                    
                if(is_null($sent)){
                    $response = TwitterUtility::tweetAs($this->user_id,$this->ticker);                    
                    $dest = new eTickerDestination;
                    $dest->ticker_id = $this->id;
                    $dest->user_id = $this->user_id;
                    $dest->destination_id = $destination->id;
                    if (sizeof($response->errors) > 0) {
                        foreach ($response->errors as $i => $error) {
                            $dest->response .= $error->message;
                        }
                    } else {
                        $dest->response = $response->id_str;
                    }
                    $dest->save();                             
                }
            }
            if($this->to_facebook == 1){
                $destination = eDestination::model()->findByAttributes(Array('destination'=>'facebook'));
                $sent = eTickerDestination::model()->findByAttributes(Array('ticker_id'=>$this->id,'user_id'=>$this->user_id,'destination_id'=>$destination->id));                                
                if(is_null($sent)){
                    $post = array(
                        'message' => $this->ticker,
                        'link' => $this->createAbsoluteUrl('/'),
                    );
                    $response = FacebookUtility::shareAs($this->user_id,$this->ticker);                        
                    $dest = new eTickerDestination;
                    $dest->ticker_id = $this->id;
                    $dest->user_id = $this->user_id;
                    $dest->destination_id = $destination->id;                    
                    if (!$response['result']) {
                        $dest->response = $response['error'];
                    } else {
                        $dest->response = $response['response']['id'];
                    }
                    $dest->save();                    
                }                
            }       
        }
        return true;
    }

    public function relations() {
        // NOTE: you may need to adjust the relation name and the related
        // class name for the relations automatically generated below.
        return array(
                'user' => array(self::BELONGS_TO, 'eUser', 'user_id'),
                'question' => array(self::BELONGS_TO, 'eQuestion', 'question_id'),
                'arbitrator' => array(self::BELONGS_TO, 'eUser', 'arbitrator_id'),
                'tickerDestinations' => array(self::HAS_MANY, 'eTickerDestination', 'ticker_id'),
                'tickerRuns' => array(self::HAS_MANY, 'eTickerRun', 'ticker_id'),
                'tickerStreams' => array(self::HAS_MANY, 'eTickerStream', 'ticker_id'),
                'entity' => array(self::BELONGS_TO, 'eEntity', 'entity_id'),            
        );
    }

    public function attributeLabels() {
        return array(
            'id' => 'ID',
            'user_id' => 'User',
            'entity_id' => 'Entity',
            'question_id' => 'Question',
            'ordinal' => 'Ordinal',
            'frequency' => 'Frequency',            
            'ticker' => 'Ticker',
            'type' => 'Type',
            'source' => 'Source',
            'source_content_id' => 'Source Content',
            'source_user_id' => 'Source User',
            'to_facebook' => 'Post To Facebook',
            'to_twitter' => 'Post To Twitter',
            'to_web' => 'Post To Web',
            'to_tv' => 'Post To Tv',
            'to_mobile' => 'Post To Mobile',
            'arbitrator_id' => 'Arbitrator',
            'status' => 'Status',
            'status_date' => 'Status Date',
            'created_on' => 'Created On',
            'updated_on' => 'Updated On',
        );
    }

    public function scopes() {
        return array(
            'new' => array('condition' => 'status="new"'),
            'accepted' => array('condition' => 'status="accepted"'),
            'denied' => array('condition' => 'status="denied"'),
            'hasWebRuns' => array('condition' => 'tickerRun.web_runs != 0'),
            'hasTvRuns' => array('condition' => 'tickerRun.tv_runs != 0'),
            'hasMobileRuns' => array('condition' => 'tickerRun.mobile_runs != 0'),
            'hasDestination' => array('condition' => 'tickerDestination.ticker_id is not null'),
            'hasRuns' => array('condition' => '(tickerRuns.mobile_runs != 0 || tickerRuns.tv_runs != 0 || tickerRuns.web_runs != 0)'),
            'canRun' => array('condition' => 'tickerRun.ticker_id is not null'),
            'ticker' => array('condition' => 'type="ticker"'),
            'social' => array('condition' => 'type="social"'),
            'toWeb' => array('condition' => 'tickerDestinations.destination_id = (select id from destination where destination = "web")'),
            'isEntity' => array('condition' => 'type="entity"'),            
        );
    }

    public function filterByDate($filterDate) {
        return DateTimeUtility::filterByDate($this, $filterDate);
    }

    public function filterByTickerDate($filterDate) {
        $this->getDbCriteria()->mergeWith(array(
            'condition' => 't.created_on>=:filterDate',
            'params' => array(':filterDate' => $filterDate,),
        ));
        return $this;
    }

    public function filterByDestinationDate($filterDate) {
        $obj->getDbCriteria()->mergeWith(array(
            'condition' => 'tickerDestination.created_on>=:filterDate',
            'params' => array(':filterDate' => $filterDate,),
        ));
        return $obj;
    }

    public function filterByDestination($destinationId) {
        $this->getDbCriteria()->mergeWith(array(
            'condition' => 'destination_id=:id',
            'params' => array(':id' => $destinationId,),
        ));
        return $this;
    }

    public static function searchSocial($terms, $boolean, $filters, $minResults = 100) {
        if (empty($terms)) {
            return;
        }
        switch ($boolean) {
            case 'AND':
                $terms = '"' . $terms . ' ' . $filters . '"';
                break;
            case 'OR':
                $terms = '"' . $terms . '" OR "' . $filters . '"';
                break;
            case 'NOT':
                $terms = '"' . $terms . '" -"' . $filters . '"';
                break;
        }
        $results = TwitterUtility::search($terms);
        if (isset($results->errors[0]->message)) {
            $errors['twitter'] = $results->errors[0]->message;
            $rates['twitter'] = $results->rate_limit_remaining . ' search calls remaining.  Resets ' . $results->rate_limit_reset;
        } else {
            $rates['twitter'] = $results->rate_limit_remaining . ' search calls remaining.  Resets ' . DateTimeUtility::niceTime($results->rate_limit_reset);
            while (count($results->statuses) < $minResults) {
                $max_id = end($results->statuses)->id;
                $moreTweets = TwitterUtility::search($terms, $max_id);
                if (count($moreTweets->statuses) == 0) {
                    break;
                }
                if ($results->statuses != $moreTweets->statuses) {
                    $results->statuses = array_merge($results->statuses, $moreTweets->statuses);
                } else {
                    break;
                }
                $rates['twitter'] = $moreTweets->rate_limit_remaining . ' search calls remaining.  Resets ' . DateTimeUtility::niceTime($moreTweets->rate_limit_reset);
            }
            foreach ($results->statuses as $k => $v) {
                $ret[] = TwitterUtility::parseTweet($v);
            }
        }
        $ret['errors'] = $errors;
        $ret['rates'] = $rates;
        return $ret;
    }

    public function streamSocial($position = false) {
        return(TwitterUtility::getStream($position));
    }

}
