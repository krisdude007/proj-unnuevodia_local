<?php

class AdminReportController extends Controller
{
    public $user;
    public $notification;
    public $layout = '//layouts/admin';

    public function filters() {
        return array(
            'accessControl', // perform access control for CRUD operations
        );
    }
    
    /**
     * Anything required on every page should be loaded here
     * and should also be made a class member.
     */
    function init() {
        parent::init();
        Yii::app()->setComponents(array('errorHandler' => array('errorAction' => 'admin/error',)));
        $this->user = ClientUtility::getUser();
        $this->notification = eNotification::model()->orderDesc()->findAllByAttributes(array('user_id' => Yii::app()->user->id));
    }

    public function accessRules() {
        return array(
            array('allow',
                'actions' => array(
                    'ajaxSelectedQuestion',
                    'ajaxAnalytics',
                    'ajaxUpdateAnalytics',
                    'ajaxDashboardGraph',
                    
                    'ajaxGetLineGraphData',
                    'ajaxGetGraphData',
                    
                    'demographic',
                    'index',
                ),
                'expression' => '(Yii::app()->user->isAdmin())',
            ),
            array('deny', // deny all users
                'users' => array('*'),
            ),
        );
    }
    
    
    public function actionAjaxSelectedQuestion() {
        $this->layout = false;
        if ($_POST['pollId'] == "" || $_POST['date'] == "")
            return;
        $rows = Array(
            'Total' => number_format(ePollResponse::model()->filterByDate($_POST['date'])->countByAttributes(Array('poll_id' => $_POST['pollId']))),
            'Web' => number_format(ePollResponse::model()->filterByDate($_POST['date'])->countByAttributes(Array('poll_id' => $_POST['pollId'], 'source' => 'web'))),
            'Facebook' => number_format(ePollResponse::model()->filterByDate($_POST['date'])->countByAttributes(Array('poll_id' => $_POST['pollId'], 'source' => 'facebook'))),
            'Mobile' => number_format(ePollResponse::model()->filterByDate($_POST['date'])->countByAttributes(Array('poll_id' => $_POST['pollId'], 'source' => 'mobile'))),
            'Twitter' => number_format(ePollResponse::model()->filterByDate($_POST['date'])->countByAttributes(Array('poll_id' => $_POST['pollId'], 'source' => 'twitter'))),
                //'Text' => ePollResponse::model()->filterByDate($_POST['date'])->countByAttributes(Array('poll_id' => $_POST['pollId'], 'source' => 'text')),
        );
        $links = Array(
            'total_pollResponse_' . $_POST['pollId'],
            'web_pollResponse_' . $_POST['pollId'],
            'facebook_pollResponse_' . $_POST['pollId'],
            'mobile_pollResponse_' . $_POST['pollId'],
            'twitter_pollResponse_' . $_POST['pollId'],
        );
        $this->renderPartial('_reportTable', array('headerRow' => true, 'classes' => 'fab-a-blue', 'rows' => $rows, 'links' => $links, 'daysBack' => $_POST['daysBack']));
    }

    public function actionAjaxAnalytics() {
        $this->layout = false;
        $results = eAnalytics::pullGAdata($_POST['start_date'], $_POST['end_date']);
        $rows = Array(
            'Total Visits' => number_format($results->visits),
            'Unique Visitors' => number_format($results->uniqueVisitors),
            'Pageviews' => number_format($results->pageviews),
            'Pages Per Visit' => $results->pagesPerVisit,
            'Avg. Visit Duration' => $results->avgTimeOnSite,
            'Bounce Rate' => $results->bounceRate,
            '% New Visits' => $results->percentNew,
        );
        
        $this->renderPartial('_reportTable', array('headerRow' => true, 'id' => 'gaData', 'rows' => $rows));
        unset($rows);
        $rows['By Browser'] = '';
        foreach($results->browsers as $browser => $visits){
              $rows[$browser] = $visits.'&nbsp;-&nbsp;'.round(($visits / $results->browsersTotal) * 100, 2).'%';
        }
        $this->renderPartial('_reportTableToggle', array('id' => 'gaBrowserData', 'rows' => $rows));

        unset($rows);
        $rows['By OS'] = '';
        foreach($results->os as $os => $visits){
              $rows[$os] = $visits.'&nbsp;-&nbsp;'.round(($visits / $results->osTotal) * 100, 2).'%';
        }
        $this->renderPartial('_reportTableToggle', array('id' => 'gaOsData', 'rows' => $rows));
    }

    public function actionAjaxUpdateAnalytics() {
        $this->layout = false;
        $analytics = eAnalytics::model()->findByPk(Yii::app()->params['analytics']['projectId']);
        if (sizeof($analytics) == 0) {
            $analytics = new eAnalytics('new');
        }
        $analytics->project_id = Yii::app()->params['analytics']['projectId'];
        $startDate = Yii::app()->params['analytics']['startDate'];
        $endDate = date('Y-m-d');
        $results = eAnalytics::pullGAdata($startDate, $endDate);
        $results->startDate = $startDate;
        $results->endDate = $endDate;
        $analytics->json = json_encode($results);
        if ($analytics->validate())
            $analytics->save();
        else
            setFlash('error', "Unexpected data format");
    }

    public function actionAjaxDashboardGraph() {
        $this->layout = false;
        $filterDate = $_POST['date'];
        $this->renderPartial('_' . $_POST['metric'] . 'Graph', Array('filterDate' => $_POST['date'], 'results' => $results));
    }
    
    /**
     * 
     * 
     * Demographic ACTIONS
     * This section contains everything required for the Demographic section of the admin
     * 
     * 
     */
    public function actionDemographic($daysBack = 7, $request = null) {
        $filterDate = $daysBack == "total" ? Yii::app()->params['analytics']['startDate'] : date("Y-m-d", strtotime("-" . $daysBack . " days"));
        ini_set('memory_limit', '512M');
        list($scope, $model, $pollId) = explode('_', $request);
        //for map
        switch($model){
            case 'user':
                $demographicData = eUser::model()->with('userEmails:primary', 'votesByUserId', 'countVideosByUserId', 'countVotesByUserId', 'userLocations:primary', 'userLogins:latestMax')->findAll(array('condition' => 'date('.eUser::model()->getTableAlias().'.created_on) >= "' . $filterDate . '"', 'group' => eUser::model()->getTableAlias().'.id'));
                break;
            case 'ticker':
                $demographicData = eTicker::model()->ticker()->with('user', 'user.userEmails:primary', 'user.votesByUserId', 'user.countVideosByUserId', 'user.countVotesByUserId', 'user.userLocations:primary', 'user.userLogins:latestMax')->findAll(array('condition' => 'date(' . eTicker::model()->getTableAlias() . '.created_on) >= "' . $filterDate . '"', 'group' => eTicker::model()->getTableAlias() . '.user_id'));
                break;
            case 'video':
                $demographicData = eVideo::model()->processed()->with('user', 'user.userEmails:primary', 'user.votesByUserId', 'user.countVideosByUserId', 'user.countVotesByUserId', 'user.userLocations:primary', 'user.userLogins:latestMax')->findAll(array('condition' => 'date(' . eVideo::model()->getTableAlias() . '.created_on) >= "' . $filterDate . '"', 'group' => eVideo::model()->getTableAlias() . '.user_id'));
                break;
            case 'videoAccepted':
                $demographicData = eVideo::model()->processed()->with('user', 'user.userEmails:primary', 'user.votesByUserId', 'user.countVideosByUserId', 'user.countVotesByUserId', 'user.userLocations:primary', 'user.userLogins:latestMax')->findAll(array('condition' => eVideo::model()->getTableAlias() . '.status = "accepted" and date(' . eVideo::model()->getTableAlias() . '.created_on) >= "' . $filterDate . '"', 'group' => eVideo::model()->getTableAlias() . '.user_id'));
                break;
            case 'videoNew':
                $demographicData = eVideo::model()->processed()->with('user', 'user.userEmails:primary', 'user.votesByUserId', 'user.countVideosByUserId', 'user.countVotesByUserId', 'user.userLocations:primary', 'user.userLogins:latestMax')->findAll(array('condition' => eVideo::model()->getTableAlias() . '.status = "new" and date(' . eVideo::model()->getTableAlias() . '.created_on) >= "' . $filterDate . '"', 'group' => eVideo::model()->getTableAlias() . '.user_id'));
                break;
            case 'videoDenied':
                $demographicData = eVideo::model()->processed()->with('user', 'user.userEmails:primary', 'user.votesByUserId', 'user.countVideosByUserId', 'user.countVotesByUserId', 'user.userLocations:primary', 'user.userLogins:latestMax')->findAll(array('condition' => eVideo::model()->getTableAlias() . '.status = "denied" and date(' . eVideo::model()->getTableAlias() . '.created_on) >= "' . $filterDate . '"', 'group' => eVideo::model()->getTableAlias() . '.user_id'));
                break;
            case 'pollResponse':
                $parms = explode('_', $request);
//                $scope = $parms[0];
//                $model = $parms[1];
                if(sizeof($parms) == 3){
                    $pollId = $parms[2];
                    $demographicData = ePollResponse::model()->with('user', 'user.userEmails:primary', 'user.votesByUserId', 'user.countVideosByUserId', 'user.countVotesByUserId', 'user.userLocations:primary', 'user.userLogins:latestMax')->findAll(array('condition' => ePollResponse::model()->getTableAlias() . '.poll_id = '.$pollId.' and date(' . ePollResponse::model()->getTableAlias() . '.created_on) >= "' . $filterDate . '"', 'group' => ePollResponse::model()->getTableAlias() . '.user_id'));
                }
                $demographicData = ePollResponse::model()->with('user', 'user.userEmails:primary', 'user.votesByUserId', 'user.countVideosByUserId', 'user.countVotesByUserId', 'user.userLocations:primary', 'user.userLogins:latestMax')->findAll(array('condition' => 'date(' . ePollResponse::model()->getTableAlias() . '.created_on) >= "' . $filterDate . '"', 'group' => ePollResponse::model()->getTableAlias() . '.user_id'));
                break;
            default:
                echo "error, unrecognized model";
                exit;
        }
        $uniqueZips = array();
        foreach ($demographicData as $d) {
            $zip = ($model != 'user') ? $d->user->userLocations[0]->postal_code : $d->userLocations[0]->postal_code;
            if ((is_numeric($zip)) && (strlen($zip) == 5)) {
                $zip = (string) $zip;
                if (in_array($zip, $uniqueZips)) {
                    $uniqueZips[$zip]['count'] = 1;
                } else {
                    $uniqueZips[$zip]['count']++;
                }
            }
        }
        $postalCodes = ePostalCode::model()->findAll();
        foreach ($postalCodes as $postalCode) {
            if (isset($uniqueZips[$postalCode->identifier])) {
                $uniqueZips[$postalCode->identifier]['lat'] = ReportUtility::cleanLatLng($postalCode->latitude);
                $uniqueZips[$postalCode->identifier]['lng'] = ReportUtility::cleanLatLng($postalCode->longitude);
                $uniqueZips[$postalCode->identifier]['income'] = $postalCode->income;
            }
        }
        $records['records'] = array();
        foreach (eAppSetting::model()->demographic()->active()->findAll() as $setting) {
            $records['mapDisplayOnly'][] = $setting->attribute;
        }
        foreach ($demographicData as $d) {
            $userId = ($model != 'user') ? $d->user->id : $d->id;
            if ($userId) {
                $records['records'][] = array(
                    'UserID' => $userId,
                    'LastName' => ($model != 'user') ? $d->user->last_name : $d->last_name,
                    'FirstName' => ($model != 'user') ? $d->user->first_name : $d->first_name,
                    'Email' => ($model != 'user') ? $d->user->userEmails[0]->email : $d->userEmails[0]->email,
                    'Videos' => ($model != 'user') ? $d->user->countVideosByUserId : $d->countVideosByUserId,
                    'Votes' => ($model != 'user') ? $d->user->countVotesByUserId : $d->countVotesByUserId,
                    'Source' => ($model != 'user') ? $d->user->source : $d->source,
                    'LastLoginDate' => ($model != 'user') ? $d->user->userLogins[0]->created_on : $d->userLogins[0]->created_on,
                    'JoinDate' => ($model != 'user') ? $d->user->created_on : $d->created_on,
                    'ZipCode' => ($model != 'user') ? $d->user->userLocations[0]->postal_code : $d->userLocations[0]->postal_code,
                    'AreaHouseholdIncome' => ($model != 'user') ? $uniqueZips[$d->user->userLocations[0]->postal_code]['income'] : $uniqueZips[$d->userLocations[0]->postal_code]['income'],
                    'latitude' => ($model != 'user') ? $uniqueZips[$d->user->userLocations[0]->postal_code]['lat'] : $uniqueZips[$d->userLocations[0]->postal_code]['lat'],
                    'longitude' => ($model != 'user') ? $uniqueZips[$d->user->userLocations[0]->postal_code]['lng'] : $uniqueZips[$d->userLocations[0]->postal_code]['lng'],
                );
            }
        }
        //for graph
        if($daysBack != 'total'){
            $filterDate = date('Y-m-d', strtotime('-'.$daysBack.' days'));
        }else{
            $filterDate = Yii::app()->params['analytics']['startDate'];
        }
        $this->render('demographic', array(
            'filterDate' => $filterDate, 
            'daysBack' => $daysBack,
            'request' => $request, 
            'demographicData' => $demographicData, 
            'uniqueZips' => $uniqueZips, 
            'records' => $records,
            'model' => $model,
            'scope' => $scope,
            'pollId' => $pollId
        ));
    }
    
    /**
     * 
     * 
     * REPORTING ACTIONS
     * This section contains everything required for the reporting section of the admin
     * 
     * 
     */
    public function actionIndex($daysBack = 7) {
        $filterDate = $daysBack == "total" ? Yii::app()->params['analytics']['startDate'] : date("Y-m-d", strtotime("-" . $daysBack . " days"));
        $questions = ePoll::model()->findAll(array(
            'condition' => 'end_time >= :filterDate',
            'params' => array(':filterDate' => $filterDate),
            'order' => 'id ASC'
                ));
        $json = eAnalytics::model()->findByPk(Yii::app()->params['analytics']['projectId']);
        $analyticsData = json_decode($json->json);

        $webId = eDestination::model()->findByAttributes(Array('destination' => 'web'))->id;
        $facebookId = eDestination::model()->findByAttributes(Array('destination' => 'facebook'))->id;
        $tvId = eDestination::model()->findByAttributes(Array('destination' => 'tv'))->id;

        $settings = eAppSetting::model()->report()->active()->findAll();
        foreach ($settings as $k => $v) {
            $pageSettings[$v->attribute] = $v->value;
        }

        $this->render('index', array(
            'daysBack' => $daysBack,
            'filterDate' => $filterDate,
            'questions' => $questions,
            'analyticsData' => $analyticsData,
            'usersTotal' => eUser::model()->filterByDate($filterDate)->countByAttributes('id'),
            'usersWeb' => eUser::model()->filterByDate($filterDate)->countByAttributes(Array('source' => 'web')),
            'usersFacebook' => eUser::model()->filterByDate($filterDate)->countByAttributes(Array('source' => 'facebook')),
            'usersMobile' => eUser::model()->filterByDate($filterDate)->countByAttributes(Array('source' => 'mobile')),
            'usersTwitter' => eUser::model()->filterByDate($filterDate)->countByAttributes(Array('source' => 'twitter')),
            'responseTotalCount' => ePollResponse::model()->filterByDate($filterDate)->count(),
            'responseWebCount' => ePollResponse::model()->filterByDate($filterDate)->countByAttributes(Array('source' => 'web')),
            'responseFaceboookCount' => ePollResponse::model()->filterByDate($filterDate)->countByAttributes(Array('source' => 'facebook')),
            'responseMobileCount' => ePollResponse::model()->filterByDate($filterDate)->countByAttributes(Array('source' => 'mobile')),
            'responseTwitterCount' => ePollResponse::model()->filterByDate($filterDate)->countByAttributes(Array('source' => 'twitter')),
            'responseTextCount' => ePollResponse::model()->filterByDate($filterDate)->countByAttributes(Array('source' => 'text')),
            'tickerTotalCount' => eTicker::model()->ticker()->filterByDate($filterDate)->countByAttributes('id'),
            'tickerWebCount' => eTicker::model()->ticker()->filterByDate($filterDate)->countByAttributes(Array('source' => 'web')),
            'tickerFacebookCount' => eTicker::model()->ticker()->filterByDate($filterDate)->countByAttributes(Array('source' => 'facebook')),
            'tickerMobileCount' => eTicker::model()->ticker()->filterByDate($filterDate)->countByAttributes(Array('source' => 'mobile')),
            'tickerTwitterCount' => eTicker::model()->ticker()->filterByDate($filterDate)->countByAttributes(Array('source' => 'twitter')),
            'videoTotalCount' => eVideo::model()->processed()->filterByDate($filterDate)->countByAttributes('id'),
            'videoWebCount' => eVideo::model()->processed()->filterByDate($filterDate)->countByAttributes(Array('source' => 'web')),
            'videoFacebookCount' => eVideo::model()->processed()->filterByDate($filterDate)->countByAttributes(Array('source' => 'facebook')),
            'videoMobileCount' => eVideo::model()->processed()->filterByDate($filterDate)->countByAttributes(Array('source' => 'mobile')),
            'videoVineCount' => eVideo::model()->processed()->filterByDate($filterDate)->countByAttributes(Array('source' => 'vine')),
            'videoAcceptedCount' => eVideo::model()->processed()->filterByDate($filterDate)->countByAttributes(Array('status' => 'accepted')),
            'videoNewCount' => eVideo::model()->processed()->filterByDate($filterDate)->countByAttributes(Array('status' => 'new')),
            'videoDeniedCount' => eVideo::model()->processed()->filterByDate($filterDate)->countByAttributes(Array('status' => 'denied')),
            'socialReceivedTotalCount' => eTicker::model()->filterByDate($filterDate)->social()->count(),
            'socialFacebookCount' => eTicker::model()->filterByDate($filterDate)->social()->countByAttributes(Array('source' => 'facebook')),
            'socialTwitterCount' => eTicker::model()->filterByDate($filterDate)->social()->countByAttributes(Array('source' => 'twitter')),
            'settings' => $pageSettings,
                //SOCIAL SEARCH tricky part is filterByDate, or filterByTickerDate or filterByDestinationDate (destonation date broken for some reason)
//            'socialPublishedTotalCount' => eTicker::model()->filterByDestinationDate($filterDate)->social()->with('tickerDestination')->hasDestination()->count(),
//            'socialToWebCount' => eTicker::model()->filterByTickerDate($filterDate)->social()->with('tickerDestination')->filterByDestination($webId)->count(),
//            'socialToFacebookCount' => eTicker::model()->filterByTickerDate($filterDate)->social()->with('tickerDestination')->filterByDestination($facebookId)->count(),
//            'socialToTvCount' => eTicker::model()->filterByTickerDate($filterDate)->social()->with('tickerDestination')->filterByDestination($tvId)->count(),
        ));
    }
    
    public function actionAjaxGetLineGraphData(){
        $filterDate = $_POST['filterDate'];
        switch($_POST['model']){
            case "user":
                $results = eUser::model()->filterByDate($filterDate)->findAll();
                break;
            case "video":
                $results = eVideo::model()->processed()->filterByDate($filterDate)->findAll();
                break;
            case "ticker":
                $results = eTicker::model()->ticker()->filterByDate($filterDate)->findAll();
                break;
            case "pollResponse":
                if(isset($_POST['pollId']) && $_POST['pollId'] != '')
                    $results = ePollResponse::model()->filterByDate($filterDate)->FindAllByAttributes(Array('poll_id' => $_POST['pollId']));
                else
                    $results = ePollResponse::model()->filterByDate($filterDate)->findAll();
                break;
            case "videoAccepted":
                $results = eVideo::model()->processed()->filterByDate($filterDate)->FindAllByAttributes(Array('status' => 'accepted'));
                break;
            case "videoNew":
                $results = eVideo::model()->processed()->filterByDate($filterDate)->FindAllByAttributes(Array('status' => 'new'));
                break;
            case "videoDenied":
                $results = eVideo::model()->processed()->filterByDate($filterDate)->FindAllByAttributes(Array('status' => 'denied'));
                break;
            default:
                echo "error: unexpected model ONE";
                return true;
        }
        if($_POST['scope'] == 'total'){
            $initializedResultSet = ReportUtility::initResults($filterDate);
            switch($_POST['model']){
                case "user":
                    $totals = Array(
                        'web' => $initializedResultSet,
                        'facebook' => $initializedResultSet,
                        'twitter' => $initializedResultSet,
                        'mobile' => $initializedResultSet,
                        'total' => $initializedResultSet
                    );
                    $seriesColors = array('#35aa47', '#ff9900', '#e02222', '#852b99', '#aaaaaa');
                    break;
                case "video":
                case "videoAccepted":
                case "videoNew":
                case "videoDenied":
                    $totals = Array(
                        'web' => $initializedResultSet,
                        'facebook' => $initializedResultSet,
                        'twitter' => $initializedResultSet,
                        'mobile' => $initializedResultSet,
                        'vine' => $initializedResultSet,
                        'total' => $initializedResultSet
                    );
                    $seriesColors = array('#35aa47', '#ff9900', '#e02222', '#852b99', '#00bf8f', '#aaaaaa');
                    break;
                case "ticker":
                    $totals = Array(
                        'web' => $initializedResultSet,
                        'facebook' => $initializedResultSet,
                        'twitter' => $initializedResultSet,
                        'mobile' => $initializedResultSet,
                        'total' => $initializedResultSet
                    );
                    $seriesColors = array('#35aa47', '#ff9900', '#e02222', '#852b99', '#aaaaaa');
                    break;
                case "vote":
                    $totals = Array(
                        'web' => $initializedResultSet,
                        'facebook' => $initializedResultSet,
                        'twitter' => $initializedResultSet,
                        'mobile' => $initializedResultSet,
                        'total' => $initializedResultSet
                    );
                    $seriesColors = array('#35aa47', '#ff9900', '#e02222', '#852b99', '#aaaaaa');
                    break;
                case "pollResponse":
                    $totals = Array(
                        'web' => $initializedResultSet,
                        'facebook' => $initializedResultSet,
                        'twitter' => $initializedResultSet,
                        'mobile' => $initializedResultSet,
                        'total' => $initializedResultSet
                    );
                    $seriesColors = array('#35aa47', '#ff9900', '#e02222', '#852b99', '#aaaaaa');
                    break;
                default:
                    echo "error: unexpected model TWO";
                    return;
                    break;
            }
        }else{
            $totals = Array(
                $_POST['scope'] =>  ReportUtility::initResults($filterDate)
            );
        }
        $max = 0;
        foreach($results as $k => $v){
            if($_POST['scope'] == 'total' || $_POST['scope'] == $v->source){
                $totals[$v->source][substr($v->created_on, 0, strpos($v->created_on, ' '))]++;
                $totals['total'][substr($v->created_on, 0, strpos($v->created_on, ' '))]++;
                $newMax = $totals['total'][substr($v->created_on, 0, strpos($v->created_on, ' '))];
                $max = $newMax > $max ? $newMax : $max;
            }
        }
        if($_POST['scope'] != 'total'){
            unset($totals['total']);
        }else{
            $ret['deselectTotal'] = true;
        }
        $ret['data'] = $totals;
        $ret['seriesColors'] = json_encode($seriesColors);
        $ret['yMax'] = $max;
        echo json_encode($ret);
    }

    public function actionAjaxGetGraphData(){
        $filterDate = $_POST['filterDate'];
        switch($_POST['model']){
            case "video":
                $results = Array(
                    'Web' => eVideo::model()->processed()->filterByDate($filterDate)->countByAttributes(Array('source' => 'web')),
                    'Mobile' => eVideo::model()->processed()->filterByDate($filterDate)->countByAttributes(Array('source' => 'mobile')),
                    'Facebook' => eVideo::model()->processed()->filterByDate($filterDate)->countByAttributes(Array('source' => 'facebook')),
                    'Vine' => eVideo::model()->processed()->filterByDate($filterDate)->countByAttributes(Array('source' => 'vine'))
                );
                $seriesColors = array('#fd8e22', '#ff4014', '#e7191b', '#c91011');
                break;
            case "ticker":
                $results = Array(
                    'Web' => eTicker::model()->filterByDate($filterDate)->countByAttributes(Array('source' => 'web')),
                    'Mobile' => eTicker::model()->filterByDate($filterDate)->countByAttributes(Array('source' => 'mobile')),
                    'Facebook' => eTicker::model()->filterByDate($filterDate)->countByAttributes(Array('source' => 'facebook'))
                );
                $seriesColors = array('#ffd73d', '#b1b614', '#909408');
                break;
            case "vote":
                $results = Array(
                    'Web' => ePollResponse::model()->filterByDate($filterDate)->countByAttributes(Array('source' => 'web')),
                    'Mobile' => ePollResponse::model()->filterByDate($filterDate)->countByAttributes(Array('source' => 'mobile')),
                    'Facebook' => ePollResponse::model()->filterByDate($filterDate)->countByAttributes(Array('source' => 'facebook')),
                    'Twitter' => ePollResponse::model()->filterByDate($filterDate)->countByAttributes(Array('source' => 'twitter'))
                );
                $seriesColors = array('#bf4ca6', '#941278', '#480858', '#2c0237');
                break;
        }
        $max = 0;
        foreach($results as $k => $v){
            $max = $v > $max ? $v : $max;
        }
        $max = ceil($max * .2 + $max);
        $ret['data'] = $results;
        $ret['seriesColors'] = json_encode($seriesColors);
        $ret['yMax'] = $max;
        echo json_encode($ret);
    }
}