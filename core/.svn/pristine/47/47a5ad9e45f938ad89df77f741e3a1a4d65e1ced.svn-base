<?php

class AdminSocialStreamController extends Controller {

    
    public $user;
    public $notification;
    public $layout = '//layouts/admin';

    public function filters() {
        return array(
            'accessControl', // perform access control for CRUD operations
        );
    }

    public function accessRules() {
        return array(
            
           array('allow',
                'actions'=>array(
                    'ajaxStartStream',
                    'ajaxStopStream',
                    'ajaxReadStream',
                    'index',
                    ),
                'expression'=>'(Yii::app()->user->isSuperAdmin() || Yii::app()->user->hasPermission('.$this->id.'))',
            ),
            array('deny', // deny all users
                'users' => array('*'),
            ),
        );
    }

    /**
     * Anything required on every page should be loaded here
     * and should also be made a class member.
     */
    function init() {
        parent::init();
        Yii::app()->setComponents(array('errorHandler' => array('errorAction' => 'admin/error',)));
        $this->user = ClientUtility::getUser();
        $this->notification = eNotification::model()->orderDesc()->findAllByAttributes(array('user_id' => Yii::app()->user->id));
    }
    
    /**
     * 
     * 
     * SOCIAL STREAM ACTIONS
     * This section contains everything required for the social stream section of the admin
     * 
     * 
     */
    public function actionIndex(){
        $questions = eQuestion::model()->current()->findAll();
        $this->render('index',Array('questions'=>$questions));
    }

    public function actionAjaxStartStream(){
        echo TwitterUtility::openStream();
    }

    public function actionAjaxStopStream(){
        echo TwitterUtility::killProcess('twitterstream');
    }

    public function actionAjaxReadStream(){
        foreach($_POST as $k=>$v){
            $$k = $v;
        }
        $questions = eQuestion::model()->current()->findAll();
        foreach($questions as $question){
            $responses[] = $question->hashtag;
        }        
        $position = (is_numeric($position)) ? $position : -20000;
        $file = Yii::app()->params['twitter']['streamFile'];
        $fp = fopen($file, 'r'); 
        if(!$fp){
            die('can\'t open stream file!');
        }
        fseek($fp,$position,($position < 0) ? SEEK_END : SEEK_SET);
        while(!feof($fp) && sizeof($results['tweets']) <= 50){                 
            $buffer = stream_get_line($fp,10000,"\r\n");            
            if($position < 0){
                $buffer = stream_get_line($fp,10000,"\r\n");            
            }
            $tweet = json_decode($buffer);
            if(is_object($tweet)){
                foreach($responses as $response){
                    if(stripos($tweet->text,$response)){
                        $clean = LanguageUtility::filter($tweet->text);
                        $screenNameClean = LanguageUtility::filter($tweet->user->screen_name);
                        $nameClean = LanguageUtility::filter($tweet->user->name);
                        $bioClean = LanguageUtility::filter($tweet->user->description);
                        foreach($tweet->entities->urls as $url){
                            $tweet->text = str_replace($url->url,$url->expanded_url,$tweet->text);    
                        }
                        foreach($tweet->entities->media as $media){
                            $tweet->text = str_replace($media->url,$media->expanded_url,$tweet->text);    
                        }                        
                        $results['tweets'][] = Array(
                            'avatar' => $tweet->user->profile_image_url,
                            'username' => $tweet->user->screen_name,
                            'userid' => $tweet->user->id,
                            'date' => date('m-d-Y h:i:sa',strtotime($tweet->created_at)),
                            'content' => Utility::makeLinksFromText($tweet->text),
                            'id' => $tweet->id_str,
                            'source' => 'twitter',
                            'hashtag' => $response,                            
                            'language' => $tweet->lang,
                            'accountDescription' => $tweet->user->description,
                            'accountLanguage' => $tweet->user->lang,
                            'accountLink' => "http://www.twitter.com/".$tweet->user->screen_name,
                            'clean' => Array(
                                'pattern'=>$clean['filter']->pattern,
                                'pass'=>$clean['result'],
                            ),
                            'accountClean' => Array(
                                'pattern'=>Array(
                                        $screenNameClean['filter']->pattern,
                                        $nameClean['filter']->pattern,
                                        $bioClean['filter']->pattern,
                                    ),
                                'pass'=>($screenNameClean['result'] && $nameClean['result'] && $bioClean['result']),
                            ),                            
                            'media'=>(sizeof($tweet->entities->media) > 0) ? true : false,
                            'verified'=>$tweet->user->verified,
                            'place'=>(!empty($tweet->place->full_name)) ? $tweet->place->full_name.', '.$tweet->place->country_code : '',
                            'hasLocation'=>(!empty($tweet->place->name)) ? true : false,
                            'tweetCoordinates'=>(!empty($tweet->coordinates->coordinates)) ? $tweet->coordinates->coordinates : '',
                            'placeCoordinates'=>(!empty($tweet->place->bounding_box->coordinates)) ? $tweet->place->bounding_box->coordinates : '',
                            //'tweet'=>$tweet,
                        );
                    }                    
                }
            }
        }
        $results['beginPos'] = $position;        
        $results['endPos'] = ftell($fp);        
        fclose($fp);        
        echo json_encode($results);
    }

    
}