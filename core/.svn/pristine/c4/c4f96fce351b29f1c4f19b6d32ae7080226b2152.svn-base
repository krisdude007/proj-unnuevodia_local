<?php

class AdminTickerController extends Controller {

    public $user;
    public $notification;
    public $layout = '//layouts/admin';

    public function filters() {
        return array(
            'accessControl', // perform access control for CRUD operations
        );
    }

    public function accessRules() {
        return array(
            array('allow',
                'actions' => array(
                    'index',
                    'tickerModalHistory',
                ),
                'expression' => '(Yii::app()->user->isAdmin())',
            ),
            array('deny', // deny all users
                'users' => array('*'),
            ),
        );
    }

    /**
     * Anything required on every page should be loaded here
     * and should also be made a class member.
     */
    function init() {
        parent::init();
        Yii::app()->setComponents(array('errorHandler' => array('errorAction' => 'admin/error',)));
        $this->user = ClientUtility::getUser();
        $this->notification = eNotification::model()->orderDesc()->findAllByAttributes(array('user_id' => Yii::app()->user->id));
    }

    /**
     *
     *
     * TICKER ACTIONS
     * This section contains everything required for the ticker section of the admin
     *
     *
     */
    public function actionIndex() {

        $question_id = "";
        if (isset($_GET['question'])) {
            $question_id = $_GET['question'];
        }
        $status = 'new';
        if (isset($_GET['status'])) {
            $status = $_GET['status'];
        }
        $failedLanguage = ($_GET['failedLanguage'] == 'on') ? 1 : 0;

        $questions = Utility::resultToKeyValue(eQuestion::model()->ticker()->current()->findAll(), 'id', 'question');
        if (ADMIN_TICKER_ENTITY) {
            $questions['entity'] = 'Entity Tickers';
        }
        $entityList = array();
        $entities = eEntity::model()->findAll();
        foreach ($entities as $entity) {
            $entityList[$entity->id] = $entity->name;
        }
        $entity = new eEntity();
        $entityTicker = new eTicker();
        $statuses = TickerUtility::getStatuses();

        if (isset($_POST['eTicker'])) {
            //entity
            if (isset($_POST['eTicker']['entity']) && is_numeric($_POST['eEntity']['name'])) {
                $entityTicker->attributes = $_POST['eTicker']['entity'];
                $entityTicker->type = 'ticker';
                if ($entityTicker->validate()) {
                    $entityTicker->entity_id = $_POST['eEntity']['name'];
                    $entityTicker->status = 'accepted';
                    $entityTicker->type = 'entity';
                    $entityTicker->arbitrator_id = Yii::app()->user->getId();
                    $entityTicker->save();
                    Yii::app()->user->setFlash('success', "Ticker Added!");
                } else {
                    Yii::app()->user->setFlash('error', "Unable to Add Ticker!");
                }
            }
            //ticker
            if (is_array($_POST['eTicker'])) {
                $tickers = array();
                foreach ($_POST['eTicker'] as $id => $ticker) {
                    $tickers[$id] = eTicker::model()->findByPk($id); //get from db
                    $org_status = $tickers[$id]->status;
                    $tickers[$id]->attributes = $_POST['eTicker'][$id]; //set from post: status should not be updated.
                    $tickers[$id]->arbitrator_id = Yii::app()->user->getId();
                    if (!empty($_POST['eTicker'][$id]['status'])) {//accepted or denied button
                        if (TICKER_FILTERS_EXTENDED) {
                            $tickers[$id]->status = 'new';
                            $tickers[$id]->extendedStatus = Utility::updateExtendedStatus($status, $_POST['eTicker'][$id]['status'], $tickers[$id]);
                        }
                    }else{//do not use empty status submitted for tabular form
                        $tickers[$id]->status = $org_status;
                    }
                    if ($tickers[$id]->validate()) {
                        $tickers[$id]->save();
                    }
                    if ($_POST['eTicker'][$id]['status'] == 'denied' || $_POST['eTicker'][$id]['stop'] == 1) {
                        $tickerRuns = eTickerRun::model()->findAllByAttributes(Array('ticker_id' => $id, 'stopped' => 0), 'web_runs > web_ran || mobile_runs > mobile_ran || tv_runs > tv_ran');
                        foreach ($tickerRuns as $tickerRun) {//stop denied
                            $tickerRun->stopped = 1;
                            $tickerRun->user_id = Yii::app()->user->getId();
                            $tickerRun->save();
                        }
                    }
                }
            }
        }
        //TickerRun
        if (isset($_POST['eTickerRun'])) {
            if (is_array($_POST['eTickerRun'])) {
                $tickerRuns = array();
                foreach ($_POST['eTickerRun'] as $id => $tickerRun) {
                    $tickerRuns[$id] = eTickerRun::model()->findByAttributes(array('ticker_id' => $id));
                    if (is_null($tickerRuns[$id])) {
                        $tickerRuns[$id] = new eTickerRun();
                    }
                    $tickerRuns[$id]->attributes = $_POST['eTickerRun'][$id];
                    $tickerRuns[$id]->ticker_id = $id;
                    $tickerRuns[$id]->user_id = Yii::app()->user->getId();
                    if ($tickerRuns[$id]->validate() && ($tickerRuns[$id]->web_runs > 0 || $tickerRuns[$id]->mobile_runs)) {
                        $tickerRuns[$id]->save(false);
                    }
                }
            }
        }

        //$tickers = eTicker::model()->findAllByAttributes($attributes);
        //var_dump( $tickers);
        //This is called again because the view will refresh and we need to load only the tickers that match the current criteria.
        $ticker = new eTicker('search');
        if ($question_id)
            $ticker->question_id = $question_id;
        $dataProvider = $ticker->search($status);
        $tickers = eTicker::model()->{$status}()->with('tickerDestinations', 'tickerRuns', 'user', 'user.userEmails:primary')->recent()->findAll($dataProvider->criteria);
        if ($failedLanguage) {
            foreach ($tickers as $id => $ticker) {
                if ($ticker['clean']['result']) {
                    unset($tickers[$id]);
                }
            }
        }
        $tickerRuns = Array();
        if ($status == 'accepted') {
            foreach ($tickers as $id => $ticker) {
                $tickerRuns[$id] = new eTickerRun;
            }
        }

        $this->render('index', array(
            'question' => $question_id,
            'questions' => $questions,
            'statuses' => $statuses,
            'status' => $status,
            'entity' => $entity,
            'entities' => $entityList,
            'entityTicker' => $entityTicker,
            'failedLanguage' => $failedLanguage,
            'tickers' => $tickers,
            'pages' => $dataProvider->pagination,
            'sort' => $dataProvider->sort,
            'tickerRuns' => $tickerRuns
        ));
    }

    public function actionTickerModalHistory() {
        if (!isset($_POST['ticker_id'])) {
            echo("ticker is not available!");
            return;
        }
        $ticker_id = $_POST['ticker_id'];
        $criteria = new CDbCriteria;
        $criteria->condition = "action REGEXP '^adminTicker/index/\\\\?question=(.*)eTicker%5B".$ticker_id."%5D%5Bstatus%5D=[a-z]+'";
        $criteria->order = 't.id desc';
        $audits = eAudit::model()->with('user')->findAll($criteria);
        $i = 0;
        $parsedAudits = array();
        foreach ($audits as $audit) {
            $action = $audit->action;
            $parsed_url = parse_url($action);
            parse_str($parsed_url['query']); //status,eTicker[id][status],eTicker[id][question_id]
            $parsedAudits[$i]['created_on'] = $audit->created_on;
            $parsedAudits[$i]['status'] = $eTicker[$ticker_id][status]." ticker ID: ".$ticker_id." on ".$status.";";
            $parsedAudits[$i]['username'] = $audit->user->username;
            $i++;
        }
        $this->renderPartial('tickerModalHistory', array('parsedAudits' => $parsedAudits));
    }

}
