<?php

class eQuestion extends Question {

    public static function model($className = __CLASS__) {
        return parent::model($className);
    }

    public function rules() {
        // NOTE: you should only define rules for those attributes that
        // will receive user inputs.
        return array(
            array('user_id', 'default', 'value' => Yii::app()->user->getId()),
            array('created_on, updated_on', 'default', 'value' => date("Y-m-d H:i:s"), 'setOnEmpty' => false, 'on' => 'insert'),
            array('updated_on', 'default', 'value' => date("Y-m-d H:i:s"), 'setOnEmpty' => false, 'on' => 'update'),
            array('question, start_time, end_time', 'required', 'on' => 'insert'),
            array('user_id, is_ticker, is_deleted', 'numerical', 'integerOnly' => true),
            array('question', 'length', 'max' => 255),
            array('hashtag', 'length', 'max' => 64),
            // The following rule is used by search().
            // Please remove those attributes that should not be searched.
            array('id, user_id, question, hashtag, start_time, end_time, created_on, updated_on', 'safe', 'on' => 'search'),
        );
    }

    public function relations() {
        $defaultRelations = array(
            'user' => array(self::BELONGS_TO, 'eUser', 'user_id'),
            'videos' => array(self::HAS_MANY, 'eVideo', 'question_id'),
            'tickers' => array(self::HAS_MANY, 'eTicker', 'question_id'),
            'videoTally' => array(self::STAT, 'eVideo', 'question_id', 'select' => 'COUNT(id)', 'group' => 'question_id'),            
            'tickerTally' => array(self::STAT, 'eTicker', 'question_id', 'select' => 'COUNT(id)', 'group' => 'question_id'),          
        );
        
        if(VIDEO_FILTERS_EXTENDED){
            
            $videoExtendedRelation = array(
                'videoAcceptedTally' => array(self::STAT, 'eVideo', 'question_id', 'select' => 'COUNT(id)', 'group' => 'question_id', 'condition'=>"`t`.statusbit & ".STATUS_ACCEPTED_I."
                                                   AND (`t`.statusbit & ".STATUS_DENIED_I.") = 0"),
            );
        }             
        else{
            $videoExtendedRelation = array(
                'videoAcceptedTally' => array(self::STAT, 'eVideo', 'question_id', 'select' => 'COUNT(id)', 'group' => 'question_id', 'condition'=>'status="accepted"'),
            );
        }
            
        if(TICKER_FILTERS_EXTENDED){
            $tickerExtendedRelation = array(
                'tickerAcceptedTally' => array(self::STAT, 'eTicker', 'question_id', 'select' => 'COUNT(id)', 'group' => 'question_id', 'condition'=>"`t`.statusbit & ".STATUS_ACCEPTED_I."
                                                   AND (`t`.statusbit & ".STATUS_DENIED_I.") = 0"),
            );
        }
        else{
            $tickerExtendedRelation = array(
                'tickerAcceptedTally' => array(self::STAT, 'eTicker', 'question_id', 'select' => 'COUNT(id)', 'group' => 'question_id', 'condition'=>'status="accepted"'),
            );
        }
        return CMap::mergeArray($defaultRelations, CMap::mergeArray($videoExtendedRelation, $tickerExtendedRelation));            
    }

    public function scopes() {
        return array(
            'current' => array(
                'condition' => "'" . date("Y-m-d H:i:s") . "' BETWEEN start_time AND end_time AND is_deleted = '0'"
            ),
            'today' => array(
                'condition' => "DATE(start_time) = '" . date("Y-m-d") . "' AND is_deleted = '0'"
            ),
            'ticker' => array(
                'condition' => "is_ticker = '1'"
            ),
            'video' => array(
                'condition' => "is_ticker = '0'"
            ),
            'deleted' => array(
                'condition' => "is_deleted = '1'"
            ),
            'notdeleted' => array(
                'condition' => "is_deleted = '0'"
            ),
            'orderByCreatedDesc' => array(
                'order' => '`t`.created_on DESC',
            ),
            'orderByCreatedAsc' => array(
                'order' => '`t`.created_on ASC',
            ),
            'orderByIDDesc' => array(
                'order' => '`t`.id DESC',
            ),
        );
    }

}